<!DOCTYPE html>
<html>
<head>
	<title>Push Notification</title>
	<style>
        .star{
          color: goldenrod;
          font-size: 2.0rem;
          padding: 0 1rem; /* space out the stars */
        }
        .star::before{
          content: '\2606';    /* star outline */
          cursor: pointer;
        }
        .star.rated::before{
          /* the style for a selected star */
          content: '\2605';  /* filled star */
        }
        
        .stars{
            counter-reset: rateme 0;   
            font-size: 2.0rem;
            font-weight: 900;
        }
        .star.rated{
            counter-increment: rateme 1;
        }
        .stars::after{
            content: counter(rateme) '/5';
        }
    </style>
	
	<style>

		h3 {
		 font-family: Georgia, "Times New Roman", Times, serif;
		 font-size: 12px;
		 color: #039;
		 background-color: #FCEBB6;
		
		}
		.stylename {
		 font-family: Georgia, “Times New Roman”, Times, serif;
		 font-size: 15px;
		 font-style: normal;
		 font-weight: bold;
		 font-variant: small-caps;
		 color: #006;
		}
		
		</style>

    <script src="https://www.gstatic.com/firebasejs/4.9.0/firebase.js"></script>

    <script>
        // Your web app's Firebase configuration
        var config = {
          apiKey: "AIzaSyBdG1InVWd_nf9L0A77rL23L_hRRnYKNPI",
        authDomain: "androhub-2b873.firebaseapp.com",
        databaseURL: "https://androhub-2b873.firebaseio.com",
        projectId: "androhub-2b873",
        storageBucket: "androhub-2b873.appspot.com",
        messagingSenderId: "515237248825",
        appId: "1:515237248825:web:8a891adee8182b4802f2e8",
        measurementId: "G-1T5M7KETK3"
        };
        // Initialize Firebase
        firebase.initializeApp(config);
      </script>
</head>
<body>
<h3>
    Firebase Cloud Messaging (FCM) is a cross-platform messaging solution that lets you reliably send messages at no cost.
</h3>
<p class="stylename">
    Firebase Cloud Messaging (FCM) is a cross-platform messaging solution that lets you reliably send messages at no cost.


Using FCM, you can notify a client app that new email or other data is available to sync. You can send notification messages to drive user re-engagement and retention. For use cases such as instant messaging, a message can transfer a payload of up to 4KB to a client app.
Using deprecated Google Cloud Messaging APIs? Learn more about how to migrate to FCM.

iOS setup Android setup Web setup C++ setup Unity setup

Key capabilities
Send notification messages or data messages	Send notification messages that are displayed to your user. Or send data messages and determine completely what happens in your application code. See Message types.
Versatile message targeting	Distribute messages to your client app in any of 3 ways—to single devices, to groups of devices, or to devices subscribed to topics.
Send messages from client apps	Send acknowledgments, chats, and other messages from devices back to your server over FCM’s reliable and battery-efficient connection channel.
How does it work?
An FCM implementation includes two main components for sending and receiving:

A trusted environment such as Cloud Functions for Firebase or an app server on which to build, target, and send messages.
An iOS, Android, or web (JavaScript) client app that receives messages via the corresponding platform-specific transport service.
You can send messages via the Firebase Admin SDK or the FCM server protocols. For testing or for sending marketing or engagement messages with powerful built-in targeting and analytics, you can also use the Notifications composer.

See the architectural overview for more detail and important information about the components of FCM.

Implementation path
Set up the FCM SDK	Set up Firebase and FCM on your app according to the setup instructions for your platform.
Develop your client app	Add message handling, topic subscription logic, or other optional features to your client app. During the development, you can easily send test messages from the Notifications composer.
Develop your app server	Decide whether you want to use the Firebase Admin SDK or one of the server protocols to create your sending logic—logic to authenticate, build send requests, handle responses, and so on. Then build out the logic in your trusted environment. Note that if you want to use upstream messaging from your client applications, you must use XMPP, and that Cloud Functions does not support the persistent connection required by XMPP.
</p>
<a>
	<img src="images/print.png" alt="print screen"
	onclick="window.print(); "target="_blank"
	style="cursor: pointer;" > </a>


<table>
  
	<tr>
	 <td>Comment Here: </td>
	 <td><input type="text" name="user_name" id="user_name" /></td>
	</tr>
	<tr>
	 <td colspan="2">
	  <input type="button" value="Submit" onclick="save_user();" />
	  
	 </td>
	</tr>
   </table>
   
   <h3>COMMENTS</h3>
   
   <table id="tbl_users_list" border="1">
	<tr>
	 <td>ID</td>
	 <td> <b>Comments</b></td>
	</tr>
   </table>
  
   <script>
	var database = firebase.database();
	var tblUsers = document.getElementById('tbl_users_list');
	var databaseRef = firebase.database().ref('comments/');
	var rowIndex = 1;
	
	databaseRef.once('value', function(snapshot) {
	  snapshot.forEach(function(childSnapshot) {
	 var childKey = childSnapshot.key;
	 var childData = childSnapshot.val();
	 
	 var row = tblUsers.insertRow(rowIndex);
	 var cellId = row.insertCell(0);
	 var cellName = row.insertCell(1);
	 cellId.appendChild(document.createTextNode(childKey));
	 cellName.appendChild(document.createTextNode(childData.user_name));
	 
	 rowIndex = rowIndex + 1;
	  });
	});
	 
	function save_user(){
	 var user_name = document.getElementById('user_name').value;
	
	 var uid = firebase.database().ref().child('comments').push().key;
	 
	 var data = {
	  user_id: uid,
	  user_name: user_name
	 }
	 
	 var updates = {};
	 updates['/comments/' + uid] = data;
	 firebase.database().ref().update(updates);
	 
	 alert('The user is created successfully!');
	 reload_page();
	}

   
	
	function reload_page(){
	 window.location.reload();
	}
	
   </script>
    <h1>Star Rating System</h1>
    <div class="stars" data-rating="3">
        <span class="star">&nbsp;</span>
        <span class="star">&nbsp;</span>
        <span class="star">&nbsp;</span>
        <span class="star">&nbsp;</span>
        <span class="star">&nbsp;</span>
    </div>
    <p>The number shown after the CSS is generated with a CSS counter.</p>
    
    
    <script>
        
        //initial setup
        document.addEventListener('DOMContentLoaded', function(){
            let stars = document.querySelectorAll('.star');
            stars.forEach(function(star){
                star.addEventListener('click', setRating); 
            });
            
            let rating = parseInt(document.querySelector('.stars').getAttribute('data-rating'));
            let target = stars[rating - 1];
            target.dispatchEvent(new MouseEvent('click'));
        });

        function setRating(ev){
            let span = ev.currentTarget;
            let stars = document.querySelectorAll('.star');
            let match = false;
            let num = 0;
            stars.forEach(function(star, index){
                if(match){
                    star.classList.remove('rated');
                }else{
                    star.classList.add('rated');
                }
                //are we currently looking at the span that was clicked
                if(star === span){
                    match = true;
                    num = index + 1;
                }
            });
            document.querySelector('.stars').setAttribute('data-rating', num);
        }
        
    </script>
</body>
</html>